package simplehttpserver;

import com.kttdevelopment.simplehttpserver.*;
import com.kttdevelopment.webdir.server.httpserver.SimpleHttpServerUnmodifiable;
import com.sun.net.httpserver.HttpExchange;
import org.junit.*;

import java.io.IOException;

public class UnmodifiableServerTests {

    @Test
    public void testSupported() throws IOException{
        SimpleHttpServer server = SimpleHttpServer.create();
        try{
            server.getAddress();
        }catch(final UnsupportedOperationException ignored){
            Assert.fail("Supported operation address was blocked");
        }
        try{
            server.getExecutor();
        }catch(final UnsupportedOperationException ignored){
            Assert.fail("Supported operation executor was blocked");
        }
    }

    @Test
    public void testUnsupported() throws IOException{
        final SimpleHttpServer server = SimpleHttpServer.create();
        final SimpleHttpServer serverUnmodifiable = new SimpleHttpServerUnmodifiable(server);

        final Runnable[] testMethods = new Runnable[]{
            serverUnmodifiable::getHttpServer,
            () -> {
                try{
                    serverUnmodifiable.bind(null);
                }catch(final IOException ignored){
                    Assert.fail("Unmodifiable server was allowed to attempt bind");
                }
            },
            () -> {
                try{
                    serverUnmodifiable.bind(null,-1);
                }catch(final IOException ignored){
                    Assert.fail("Unmodifiable server was allowed to attempt bind");
                }
            },
            () -> serverUnmodifiable.setExecutor(null),
            () -> serverUnmodifiable.setHttpSessionHandler(null),
            serverUnmodifiable::getHttpSessionHandler,
            () -> serverUnmodifiable.getHttpSession((HttpExchange) null),
            () -> serverUnmodifiable.getHttpSession((SimpleHttpExchange) null),
            serverUnmodifiable::start,
            serverUnmodifiable::stop,
            () -> serverUnmodifiable.stop(-1)
        };

        for(final Runnable method : testMethods){
            try{
                method.run();
                Assert.fail("An unsupported operation ran without permission");
            }catch(final UnsupportedOperationException ignored){
            }
        }
    }

    @Test
    public void testLimitedContextAccess() throws IOException{
        final String blockedContext = "blocked";
        final SimpleHttpServer server = SimpleHttpServer.create();
        final SimpleHttpServer serverUnmodifiable = new SimpleHttpServerUnmodifiable(server);

        server.createContext(blockedContext);

        // get
        Assert.assertNull("Unmodifiable server should not have access to contexts it didn't create",serverUnmodifiable.getContextHandler(blockedContext));

        Assert.assertTrue("Unmodifiable server with no contexts created should not have any viewable",serverUnmodifiable.getContexts().isEmpty());

        // remove
        serverUnmodifiable.removeContext(blockedContext);
        Assert.assertEquals("Unmodifiable server should not be able to remove contexts not created by itself", 1, server.getContexts().size());

        try{
            serverUnmodifiable.createContext(blockedContext);
            Assert.fail("Unmodifiable server should not be able to create contexts already occupied by the server");
        }catch(final IllegalArgumentException ignored){ }

        // creation
        final String context = serverUnmodifiable.getRandomContext();

        try{
            serverUnmodifiable.createContext(context);
        }catch(final IllegalArgumentException ignored){
            Assert.fail("Random context generated by unmodified server should be valid");
        }
        Assert.assertEquals("Unmodified server after created context should have size of 1",1, serverUnmodifiable.getContexts().size());

        serverUnmodifiable.removeContext(context);
        Assert.assertTrue("Removal of only context by unmodified server should be empty",serverUnmodifiable.getContexts().isEmpty());
    }

}
